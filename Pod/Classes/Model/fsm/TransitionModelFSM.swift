// -*- tab-width: 4; -*-
// -*- coding: utf-8 -*-

//
// This file is automatically generated by State Machine Generator.
//

import Foundation
// #include <    DeepTransitionSample-Swift.h>


public class TransitionModel_TransitionModelFSM {

    private var currentState : TransitionModel_TransitionModelStateMap_State?
    private var previousState : TransitionModel_TransitionModelStateMap_State?
    public var debugMode = false
    weak var ctxt : TransitionCenter?

    public init(context: TransitionCenter) {
        self.currentState = TransitionModel_TransitionModelStateMap._IDLE
        self.ctxt = context
    }

    public func enterStartState() {
        if let context = ctxt {
            currentState!.Entry(self, ctxt: context)
        }
    }

    private func setState(state:TransitionModel_TransitionModelStateMap_State) {
        currentState = state;
        if (debugMode) {
            NSLog("ENTER STATE: %@", state.getName())
        }
    }

    public func Default() {
        if let context = ctxt {
            currentState!.Default(self, ctxt: context)
        }
    }

    public func add() {
        if let context = ctxt {
            currentState!.add(self, ctxt: context)
        }
    }

    public func cancel() {
        if let context = ctxt {
            currentState!.cancel(self, ctxt: context)
        }
    }

    public func change(params: [String:String]) {
        if let context = ctxt {
            currentState!.change(self, ctxt: context, params: params)
        }
    }

    public func finish_remove(vc: AnyObject) {
        if let context = ctxt {
            currentState!.finish_remove(self, ctxt: context, vc: vc)
        }
    }

    public func finish_transition() {
        if let context = ctxt {
            currentState!.finish_transition(self, ctxt: context)
        }
    }

    public func move(vc: AnyObject) {
        if let context = ctxt {
            currentState!.move(self, ctxt: context, vc: vc)
        }
    }

    public func ok() {
        if let context = ctxt {
            currentState!.ok(self, ctxt: context)
        }
    }

    public func request(destination: AnyObject) {
        if let context = ctxt {
            currentState!.request(self, ctxt: context, destination: destination)
        }
    }

    public func skip_removing() {
        if let context = ctxt {
            currentState!.skip_removing(self, ctxt: context)
        }
    }

    public func stop() {
        if let context = ctxt {
            currentState!.stop(self, ctxt: context)
        }
    }

}



private protocol TransitionModel_TransitionModelStateMap_State {
    func getName() -> String
    func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func Default(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func add(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func cancel(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func change(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, params: [String:String])
    func finish_remove(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, vc: AnyObject)
    func finish_transition(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func move(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, vc: AnyObject)
    func ok(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func request(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, destination: AnyObject)
    func skip_removing(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
    func stop(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter)
}
let TransitionModel_TransitionModelStateMap = _TransitionModel_TransitionModelStateMap()

public class _TransitionModel_TransitionModelStateMap {
    let _Default = Default()
    let _MOVED = MOVED()
    let _ADDING = ADDING()
    let _REMOVING = REMOVING()
    let _CONFIRMING = CONFIRMING()
    let _IDLE = IDLE()

    public class TransitionModel_TransitionModelStateMap_StateImpl : TransitionModel_TransitionModelStateMap_State {
        func getName() -> String { return "" }
        func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {}
        func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {}
        func Default(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) { abort() }
        func add(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            Default(fsm, ctxt: ctxt)
        }
        func cancel(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            Default(fsm, ctxt: ctxt)
        }
        func change(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, params: [String:String]) {
            Default(fsm, ctxt: ctxt)
        }
        func finish_remove(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, vc: AnyObject) {
            Default(fsm, ctxt: ctxt)
        }
        func finish_transition(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            Default(fsm, ctxt: ctxt)
        }
        func move(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, vc: AnyObject) {
            Default(fsm, ctxt: ctxt)
        }
        func ok(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            Default(fsm, ctxt: ctxt)
        }
        func request(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, destination: AnyObject) {
            Default(fsm, ctxt: ctxt)
        }
        func skip_removing(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            Default(fsm, ctxt: ctxt)
        }
        func stop(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            Default(fsm, ctxt: ctxt)
        }
    }

    public class Default : TransitionModel_TransitionModelStateMap_StateImpl {
        override public func getName() -> String { return "Default" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func Default(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            fsm.previousState = fsm.currentState
            fsm.currentState = fsm.previousState
        }

        override public func stop(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._IDLE)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }

    public class MOVED : Default {
        override public func getName() -> String { return "MOVED" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            ctxt.onEntryMoved()
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func add(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._ADDING)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

        override public func finish_transition(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._IDLE)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }

    public class ADDING : Default {
        override public func getName() -> String { return "ADDING" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            ctxt.onEntryAdding()
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func move(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, vc: AnyObject) {
            if ( ctxt.isExpectedChild(vc) ) {
                    fsm.currentState!.Exit(fsm, ctxt: ctxt)
                    fsm.previousState = fsm.currentState
                    fsm.currentState = nil
                    //try {
                    // Custom action
                    ctxt.onMove(vc)
                    //} finally {
                    fsm.setState(TransitionModel_TransitionModelStateMap._MOVED)
                    fsm.currentState!.Entry(fsm, ctxt: ctxt)
                    //}
            }
        }

    }

    public class REMOVING : Default {
        override public func getName() -> String { return "REMOVING" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            ctxt.onEntryRemoving()
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func finish_remove(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, vc: AnyObject) {
            if ( ctxt.isExpectedReporter(vc) ) {
                    fsm.currentState!.Exit(fsm, ctxt: ctxt)
                    fsm.previousState = fsm.currentState
                    fsm.setState(TransitionModel_TransitionModelStateMap._ADDING)
                    fsm.currentState!.Entry(fsm, ctxt: ctxt)
            }
        }

        override public func skip_removing(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._ADDING)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }

    public class CONFIRMING : Default {
        override public func getName() -> String { return "CONFIRMING" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func cancel(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._IDLE)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

        override public func change(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, params: [String:String]) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.currentState = nil
            //try {
            // Custom action
            ctxt.onChangeParams(params)
            //} finally {
            fsm.setState(TransitionModel_TransitionModelStateMap._IDLE)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
            //}
        }

        override public func ok(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._REMOVING)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }

    public class IDLE : Default {
        override public func getName() -> String { return "IDLE" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
            ctxt.onEntryIdle()
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter) {
        }

        override public func move(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, vc: AnyObject) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.currentState = nil
            //try {
            // Custom action
            ctxt.onMove(vc)
            //} finally {
            fsm.setState(TransitionModel_TransitionModelStateMap._IDLE)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
            //}
        }

        override public func request(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionCenter, destination: AnyObject) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.currentState = nil
            //try {
            // Custom action
            ctxt.onRequestConfirming(destination)
            //} finally {
            fsm.setState(TransitionModel_TransitionModelStateMap._CONFIRMING)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
            //}
        }

    }
}
